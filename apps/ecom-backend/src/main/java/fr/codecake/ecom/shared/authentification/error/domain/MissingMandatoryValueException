// Déclaration du package auquel appartient cette classe.
package fr.codecake.ecom.shared.error.domain;

/**
 * Exception spécifique pour signaler l'absence d'une valeur obligatoire.
 * Elle hérite de AssertionException et est utilisée pour gérer les cas où une valeur requise n'est pas fournie.
 */
public final class MissingMandatoryValueException extends AssertionException {

  /**
   * Constructeur privé pour empêcher l'instanciation directe en dehors des méthodes statiques.
   * @param field Nom du champ concerné par l'erreur.
   * @param message Message décrivant l'erreur.
   */
  private MissingMandatoryValueException(String field, String message) {
    super(field, message);
  }

  /**
   * Méthode statique pour créer une exception lorsque le champ est présent mais vide ou uniquement composé d'espaces.
   * @param field Nom du champ concerné.
   * @return Une instance de MissingMandatoryValueException.
   */
  public static MissingMandatoryValueException forBlankValue(String field) {
    return new MissingMandatoryValueException(field, defaultMessage(field, "blank"));
  }

  /**
   * Méthode statique pour créer une exception lorsque le champ est `null`.
   * @param field Nom du champ concerné.
   * @return Une instance de MissingMandatoryValueException.
   */
  public static MissingMandatoryValueException forNullValue(String field) {
    return new MissingMandatoryValueException(field, defaultMessage(field, "null"));
  }

  /**
   * Méthode statique pour créer une exception lorsque le champ est une chaîne vide.
   * @param field Nom du champ concerné.
   * @return Une instance de MissingMandatoryValueException.
   */
  public static MissingMandatoryValueException forEmptyValue(String field) {
    return new MissingMandatoryValueException(field, defaultMessage(field, "empty"));
  }

  /**
   * Génère un message d'erreur standardisé pour les valeurs obligatoires manquantes.
   * @param field Nom du champ concerné.
   * @param reason Raison pour laquelle la valeur est invalide (blank, null, empty).
   * @return Un message d'erreur formaté.
   */
  private static String defaultMessage(String field, String reason) {
    return new StringBuilder()
      .append("The field \"")
      .append(field)
      .append("\" is mandatory and wasn't set")
      .append(" (")
      .append(reason)
      .append(")")
      .toString();
  }

  /**
   * Retourne le type d'erreur spécifique à cette exception.
   * @return AssertionErrorType correspondant à une valeur obligatoire manquante.
   */
  @Override
  public AssertionErrorType type() {
    return AssertionErrorType.MISSING_MANDATORY_VALUE;
  }
}
